version: '3.8'

services:
  mongodb_primary:
    container_name: mongodb_primary
    image: mongo
    volumes:
      - ./data/db_primary:/data/db
      - ./scripts/init-replica-set.sh:/scripts/init-replica-set.sh
    networks:
      - discord-replica
    ports:
      - "27017:27017"
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

  mongodb_secondary1:
    container_name: mongodb_secondary1
    image: mongo
    volumes:
      - ./data/db_secondary1:/data/db
    networks:
      - discord-replica
    ports:
      - "27018:27017"
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

  mongodb_secondary2:
    container_name: mongodb_secondary2
    image: mongo
    volumes:
      - ./data/db_secondary2:/data/db
    networks:
      - discord-replica
    ports:
      - "27019:27017"
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - discord-replica

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - .:/app/Backend
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongodb_primary:27017,mongodb_secondary1:27018,mongodb_secondary2:27019/DiscordReplicaDB?replicaSet=rs0
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb_primary
      - mongodb_secondary1
      - mongodb_secondary2
      - redis
    networks:
      - discord-replica

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - .:/usr/src/app/Frontend
    environment:
      - NODE_ENV=development
    networks:
      - discord-replica

networks:
  discord-replica:
    driver: bridge

